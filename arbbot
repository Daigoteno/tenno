<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8"/>
<title>TENNO Arbitrage Bot (Browser)</title>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<style>
  body{margin:0;padding:.8rem;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Arial,sans-serif;background:#121212;color:#e5e5e5}
  h1{font-size:1.45rem;margin:0 0 .4rem}
  .tabs{display:flex;flex-wrap:wrap;gap:.25rem;margin-bottom:.6rem;font-weight:600}
  .tab{padding:.55rem .9rem;background:#1e1e1e;border-radius:6px 6px 0 0;cursor:pointer;transition:.15s}
  .tab.active{background:#0a84ff;color:#fff}
  table{width:100%;border-collapse:collapse;font-size:.8rem}
  th,td{padding:.5rem .55rem;text-align:right;border-bottom:1px solid #2a2a2a}
  th{background:#1a1a1a;color:#aaa}
  tr.positive{background:#004d00}
  td:nth-child(1),th:nth-child(1){text-align:left}
  button{background:#0a84ff;border:none;color:#fff;padding:.35rem .6rem;border-radius:4px;font-size:.7rem}
  .center{text-align:center}
</style>
</head>
<body>

<h1>TENNO Arbitrage Bot (Browser)</h1>

<div class="tabs">
  <span class="tab active" data-filter="all">All</span>
  <span class="tab" data-filter="crypto">Crypto</span>
  <span class="tab" data-filter="stocks">Tokenized Stocks</span>
</div>

<table>
  <thead>
    <tr>
      <th>Pair</th><th>Buy @</th><th>Sell @</th><th>Net&nbsp;Profit</th><th>Action</th>
    </tr>
  </thead>
  <tbody id="tbody"></tbody>
</table>

<script>
/* ---------- CONFIG ---------- */
const EXCHANGES = ['Binance','OKX','KuCoin','Gate','Kraken','Bittrex'];
const TOKENS = {
  crypto: ['BTC','ETH','SOL','DOGE','ADA','MATIC','LTC','XRP'],
  stocks: ['NVDA','TSLA','SPY','AAPL','AMZN','XAU','META','GOOGL']
};

/* ---------- MOCK BOT ---------- */
function rand(min,max){return (Math.random()*(max-min)+min).toFixed(2);}
function mockRow(asset,type){
  const base = type==='stocks' ? asset+'.x' : asset+'/USDT';
  const buyEx = EXCHANGES[Math.floor(Math.random()*EXCHANGES.length)];
  const sellEx = EXCHANGES.filter(e=>e!==buyEx)[Math.floor(Math.random()*(EXCHANGES.length-1))];
  const buyP  = type==='stocks' ? rand(150,550) : rand(150,70000);
  const sellP = (parseFloat(buyP)*(1+rand(0.001,0.012))).toFixed(2);
  const profit = ((sellP-buyP)/buyP*100).toFixed(3);
  return {pair:base,buy:`${buyEx} ${buyP}`,sell:`${sellEx} ${sellP}`,profit:+profit};
}

function refresh(){
  const rows=[...TOKENS.crypto.map(t=>mockRow(t,'crypto')),
              ...TOKENS.stocks.map(t=>mockRow(t,'stocks'))];
  window.allRows = rows;
  render(rows);
}

function render(list){
  const filter = document.querySelector('.tab.active').dataset.filter;
  const filtered = filter==='all'?list
                 : filter==='crypto'?list.filter(r=>!r.pair.includes('.x'))
                 : list.filter(r=>r.pair.includes('.x'));
  const tbody=document.getElementById('tbody');
  tbody.innerHTML='';
  filtered.sort((a,b)=>b.profit-a.profit).forEach(r=>{
    const tr=document.createElement('tr');
    tr.className='positive';
    tr.innerHTML=`
      <td>${r.pair}</td>
      <td>${r.buy}</td>
      <td>${r.sell}</td>
      <td>+${r.profit}%</td>
      <td><button>EXECUTE</button></td>`;
    tbody.appendChild(tr);
  });
}

/* ---------- UI TABS ---------- */
document.querySelectorAll('.tab').forEach(tab=>{
  tab.onclick=()=>{
    document.querySelectorAll('.tab').forEach(t=>t.classList.remove('active'));
    tab.classList.add('active');
    render(window.allRows||[]);
  };
});

/* ---------- RUN ---------- */
refresh();                    // first paint
setInterval(refresh,10000);   // “bot loop”
</script>
</body>
</html>
